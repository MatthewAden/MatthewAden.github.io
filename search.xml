<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>研后Python复习回顾--数据分析篇</title>
      <link href="/2022/01/13/1.13/"/>
      <url>/2022/01/13/1.13/</url>
      
        <content type="html"><![CDATA[<h3 id="drop函数基本介绍"><a href="#drop函数基本介绍" class="headerlink" title="drop函数基本介绍"></a>drop函数基本介绍</h3><ul><li>用于删除数据集中多余的数据</li></ul><pre class="language-python" data-language="python"><code class="language-python">DataFrame.drop(labels&#x3D;None, axis&#x3D;0, index&#x3D;None, columns&#x3D;None, inplace&#x3D;False)</code></pre><p><strong>labels</strong>:待删除的行名or列名；<br><strong>axis</strong>:删除时所参考的轴，0为行，1为列；<br><strong>index</strong>:待删除的行名<br><strong>columns</strong>:待删除的列名<br><strong>inplace</strong>:布尔值，默认为False,这是返回的是一个copy;若为True,返回的是删除相应数据后的版本 </p><h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h3><ul><li>lambda 函数是一种小的匿名函数，lambda 函数可接受任意数量的参数，但只能有一个表达式。</li></ul><pre class="language-python" data-language="python"><code class="language-python">#例1# 语法lambda arguments : expressionx &#x3D; lambda a, b, c : a + b + cprint(x(5, 6, 2))#例2def myfunc(n):  return lambda a : a * nmydoubler &#x3D; myfunc(2)print(mydoubler(11))</code></pre><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><ul><li>map是python内置函数，会根据提供的函数对指定的序列做映射，map()函数的格式是</li></ul><pre class="language-python" data-language="python"><code class="language-python">map(function,iterable,...)    def square(x) :                            #计算平方数        return x ** 2map(square, [1,2,3,4,5])                       #计算列表各个元素的平方&lt;map object at 0x100d3d550&gt;                    #返回迭代器list(map(square, [1,2,3,4,5]))                 #使用list() 转换为列表&gt;&gt;&gt;[1, 4, 9, 16, 25]list(map(lambda x: x ** 2, [1, 2, 3, 4, 5]))   # 使用 lambda 匿名函数&gt;&gt;&gt;[1, 4, 9, 16, 25]#map()还能进行类型转换list(map(int, (1, 2, 3)))&gt;&gt;&gt;[1, 2, 3]#可以提取字典中的keylist(map(int,&#123;&#39;1&#39;:2,&#39;2&#39;:3,&#39;3&#39;:4&#125;))&gt;&gt;&gt;[1, 2, 3]</code></pre><h3 id="重置索引列"><a href="#重置索引列" class="headerlink" title="重置索引列"></a>重置索引列</h3><pre class="language-python" data-language="python"><code class="language-python">df.reset_index(drop&#x3D;True) #将索引index列重置，drop&#x3D;true是避免将旧索引添加为列</code></pre><h3 id="利用loc、iloc提取行列数据"><a href="#利用loc、iloc提取行列数据" class="headerlink" title="利用loc、iloc提取行列数据"></a>利用loc、iloc提取行列数据</h3><pre class="language-python" data-language="python"><code class="language-python">data.loc[&#39;a&#39;]   #取索引为a的行data.loc[:,[&#39;a&#39;]]  #取‘a’列data.loc[[&#39;a&#39;,&#39;b&#39;],[&#39;A&#39;,&#39;B&#39;]] #取a,b行与A,B列的相交数data.loc[:,:] #取所有数据iloc基本语法类似 只是需指定第几行第几列data.iloc[[0]] #取第一行</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>1.<strong>Series排序</strong></p><ul><li>Series.sort_index 索引排序</li><li>Series.sort_values 值引排序</li></ul><p>2.<strong>DataFrame排序</strong></p><ul><li>DataFrame<strong>.</strong>sort_index  索引排序</li><li>DataFrame<strong>.</strong>sort_values 值引排序</li></ul><pre class="language-python" data-language="python"><code class="language-python">df &#x3D; pd.DataFrame(np.arange(8).reshape((2, 4)),index &#x3D; [3,2],columns &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])df.sort_index()                             #index按照列索引升序排列df.sort_index(axis &#x3D; 1)                     #让列索引升序排序df.sort_index(axis &#x3D; 1,ascending &#x3D; False)   #让列索引降序排序#让任选a,b两列数据同时降序排列df.sort_values(by &#x3D;[&#39;a&#39;,&#39;b&#39;],ascending &#x3D; [False,False])</code></pre><h3 id="数据清洗及特征处理"><a href="#数据清洗及特征处理" class="headerlink" title="数据清洗及特征处理"></a>数据清洗及特征处理</h3><h4 id="1-处理空缺值"><a href="#1-处理空缺值" class="headerlink" title="1.处理空缺值"></a>1.处理空缺值</h4><h5 id="1-1-dropna函数"><a href="#1-1-dropna函数" class="headerlink" title="1.1.dropna函数"></a>1.1.dropna函数</h5><ul><li>用来移除空缺值</li></ul><pre class="language-python" data-language="python"><code class="language-python">DataFrame.dropna(axis&#x3D;0, how&#x3D;&#39;any&#39;, thresh&#x3D;None, subset&#x3D;None,inplace&#x3D;False)df.dropna()                 #只保留行列都没有空值的df.dropna(axis&#x3D;&#39;columns&#39;)   #只保持某行中没有空值的df.dropna(how&#x3D;&#39;all&#39;)        #只去除所有元素缺失的df.dropna(thresh&#x3D;2)         #默认去除某行有两个缺失的，更改axis可以变成列df.dropna(subset&#x3D;[&#39;name&#39;, &#39;toy&#39;]) #指定两列去除缺失</code></pre><h5 id="1-2-fillna函数"><a href="#1-2-fillna函数" class="headerlink" title="1.2.fillna函数"></a>1.2.fillna函数</h5><ul><li>填充空缺值</li></ul><pre class="language-python" data-language="python"><code class="language-python">DataFrame.fillna(value&#x3D;None,method&#x3D;None,axis&#x3D;None,inplace&#x3D;False,limit&#x3D;None,downcast&#x3D;None)df.fillna(0) #用0填充空缺值#A列用0填充values &#x3D; &#123;&quot;A&quot;: 0, &quot;B&quot;: 1, &quot;C&quot;: 2, &quot;D&quot;: 3&#125;df.fillna(value&#x3D;values)</code></pre><h4 id="2-处理重复值"><a href="#2-处理重复值" class="headerlink" title="2.处理重复值"></a>2.处理重复值</h4><pre class="language-python" data-language="python"><code class="language-python">df[df.duplicated()]       #查看重复数据df &#x3D; df.drop_duplicates() #清除重复数据</code></pre><h3 id="特征观察与处理"><a href="#特征观察与处理" class="headerlink" title="特征观察与处理"></a>特征观察与处理</h3><h4 id="1-将连续变量进行离散化处理"><a href="#1-将连续变量进行离散化处理" class="headerlink" title="1.将连续变量进行离散化处理"></a>1.将连续变量进行离散化处理</h4><pre class="language-python" data-language="python"><code class="language-python">#将连续变量Age平均分箱成5个年龄段，并分别用类别变量12345表示df[&#39;AgeBand&#39;] &#x3D; pd.cut(df[&#39;Age&#39;], 5,labels &#x3D; [1,2,3,4,5])#将连续变量Age划分为(0,5] (5,15] (15,30] (30,50] (50,80]五个年龄段，并分别用类别变量12345表示df[&#39;AgeBand&#39;] &#x3D; pd.cut(df[&#39;Age&#39;],[0,5,15,30,50,80],labels &#x3D; [1,2,3,4,5])#将连续变量Age按10% 30% 50 70% 90%五个年龄段，并用分类变量12345表示df[&#39;AgeBand&#39;] &#x3D; pd.cut(df[&#39;Age&#39;],[0,0.1,0.3,0.5,0.7,0.9],labels &#x3D; [1,2,3,4,5])</code></pre><h4 id="2-对文本变量进行转换"><a href="#2-对文本变量进行转换" class="headerlink" title="2.对文本变量进行转换"></a>2.对文本变量进行转换</h4><pre class="language-python" data-language="python"><code class="language-python">#查看类别文本变量名及种类df[&#39;Sex&#39;].value_counts()#将类别文本转换为12345,此处是把性别用1,2来量化df[&#39;Sex_num&#39;] &#x3D; df[&#39;Sex&#39;].replace([&#39;male&#39;,&#39;female&#39;],[1,2])df[&#39;Sex_num&#39;] &#x3D; df[&#39;Sex&#39;].map(&#123;&#39;male&#39;: 1, &#39;female&#39;: 2&#125;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研后Python复习回顾--数据分析篇</title>
      <link href="/2022/01/11/1.12/"/>
      <url>/2022/01/11/1.12/</url>
      
        <content type="html"><![CDATA[<h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><ul><li><p>绝对路径就是文件的真正存在的路径，是指从硬盘的根目录(盘符)开始，进行一级级目录指向文件。</p></li><li><p>相对路径就是以当前文件为基准进行一级级目录指向被引用的资源文件。</p></li><li><p>Pandas能从文本文件和Excel文件中读入数据，形成dataframe，也可以将dataframe导出到文本文件、Excel文件中存储起来。</p></li><li><p>导入函数有(1)pd.read_csv()：导入后缀名为.csv,txt的文本文件, (2)pd.read_excel()：导入后缀名为.xlsx的Excel文件</p></li><li><p>导出函数有(1)df.to_csv)()：将数据存储到csv文件或txt文件中, (2)df.to_excel()：将数据存储到Excel文件中</p></li><li><p>无论是导入函数还是导出函数，都有参数 header，表示 dataframe 的列索引。而行索引在导入函数中用参数 index_col 表示，将某列指定为行索引；行索引在导出函数中用参数 index 表示，指示是否要存好行索引。</p><h4 id="1-导入文件"><a href="#1-导入文件" class="headerlink" title="1.导入文件"></a>1.导入文件</h4><ul><li>导入文本文件：pd.read_csv()</li></ul><p>pd.read_csv()函数不仅可以导入csv文件，也可以导入txt文件。</p><pre class="language-python" data-language="python"><code class="language-python"># 导入test.csv文件df &#x3D; pd.read_csv(&#39;test.csv&#39;)# 导入test.txt文件df &#x3D; pd.read_csv(&#39;test.txt&#39;)</code></pre><ul><li>指定分隔符</li></ul><p>文本文件中，用分隔符来分隔每个值，所以读入的时候，要用参数sep告诉函数分隔符是什么，默认的分隔符是逗号。</p><pre class="language-python" data-language="python"><code class="language-python">df &#x3D; pd.read_csv(&#39;test.csv&#39;,sep&#x3D;&#39;.&#39;)  #指定分隔符是点号   </code></pre><ul><li>指定读入excel的sheet页</li></ul><p>Excel文件在读入时，默认读取第一页。但如果Excel文件有多页，且不想读取第一页而是其他页，则要用参数sheetname传入读入页的名称。</p><pre class="language-python" data-language="python"><code class="language-python">df &#x3D; pd.read_excel(&#39;test.xlsx&#39;)        #导入test.xlsx文件# 导入test.xlsx文件的sheet1页df &#x3D; pd.read_excel(&#39;test.xlsx&#39;, sheetname&#x3D;&#39;sheet1&#39;)</code></pre><h4 id="2-相对路径和绝对路径"><a href="#2-相对路径和绝对路径" class="headerlink" title="2.相对路径和绝对路径"></a>2.相对路径和绝对路径</h4><p>导入文件时，要指定文件所在的路径，可以是相对路径，也可以是绝对路径。</p><pre class="language-python" data-language="python"><code class="language-python"># 导入windows下的绝对路径：导入E盘下的test.csvpd.read_csv(&#39;E:\test.csv&#39;)# 导入mac下的绝对路径：导入xxx文件夹下的test.csvpd.read_csv(&#39;&#x2F;Users&#x2F;xxx&#x2F;test.csv&#39;)</code></pre><p>相对路径指的是当前的py文件所在的路径。当要导入的文件和py文件在同一个文件夹下，则可以用相对路径导入。</p><pre class="language-python" data-language="python"><code class="language-python">pd.read_csv(&#39;test.csv&#39;)</code></pre><p><strong>路径的转义</strong></p><pre class="language-python" data-language="python"><code class="language-python">Location &#x3D; r&#39;.&#x2F;test.csv&#39; df &#x3D; pd.read_csv(Location)</code></pre><p>注意，因为斜线是一个特殊字符，在字符串之前放置前导的 r，将会把整个字符串不进行转义。</p><h4 id="3-读取指定的列"><a href="#3-读取指定的列" class="headerlink" title="3.读取指定的列"></a>3.读取指定的列</h4><p>有时候，我们并不想把所有的列都读入，只想读取前几列，或后几列，或指定几列。这时，可以使用usecols参数。</p><pre class="language-python" data-language="python"><code class="language-python"># 读取csv数据中的第0列，第1列，第2列。df &#x3D; pd.read_csv(&#39;test.csv&#39;, usecols&#x3D;[0,1,2])</code></pre><h4 id="4-行列索引"><a href="#4-行列索引" class="headerlink" title="4.行列索引"></a>4.行列索引</h4><ul><li>默认列索引和行索引</li></ul><p>导入文件时，若不指定列索引，则默认将文件中的第一行当成dataframe列索引，并且为数据自动添加整数行索引。</p><pre class="language-python" data-language="python"><code class="language-python"># 默认将test.csv中的第一行当为列索引，自动添加从0开始的整数索引pd.read_csv(&#39;test.csv&#39;)</code></pre><ul><li>第一行非列索引</li></ul><p>若导入时，第一行是数据，并非列标题，可以将参数header设置为None，即不让第一行成为列索引。但系统会自动添加从0开始的列索引。</p><pre class="language-python" data-language="python"><code class="language-python">df &#x3D; pd.read_csv(&#39;test.csv&#39;, header&#x3D;None)</code></pre><ul><li>指定某行为列索引</li></ul><p>导入数据时默认第一行为列索引，但如果数据中第一行并非标题，而是第k行，则可以用参数header指定第k行为列索引。</p><pre class="language-python" data-language="python"><code class="language-python"># 指定test.csv中的第3行是列索引df &#x3D; pd.read_csv(&#39;test.csv&#39;, header&#x3D;3)</code></pre><ul><li>添加列索引</li></ul><p>若导入的数据中并没有任何一行能当列索引，可以用参数 names 自定义列索引。</p><pre class="language-python" data-language="python"><code class="language-python"># 指定test.csv（只有两列）中的列索引为[&#39;column1&#39;,&#39;column2&#39;]df &#x3D; pd.read_csv(&#39;test.csv&#39;, names&#x3D;[&#39;column1&#39;,&#39;column2&#39;])</code></pre><ul><li>指定行索引</li></ul><p>导入数据时，会自动添加从0开始的整数行索引。若需要指定数据中第K列为行索引，则要用index_col参数。</p><pre class="language-python" data-language="python"><code class="language-python"># 指定第0列是dataframe的行索引df&#x3D;pd.read_csv(&#39;test.csv&#39;,index_col&#x3D;0)# 指定列名为&#39;column&#39;的列是dataframe的行索引df&#x3D;pd.read_csv(&#39;test.csv&#39;,index_col&#x3D;&#39;column&#39;)</code></pre></li></ul><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><h4 id="1-写入文本文件：df-to-csv"><a href="#1-写入文本文件：df-to-csv" class="headerlink" title="1.写入文本文件：df.to_csv()"></a>1.写入文本文件：df.to_csv()</h4><p>  pandas可将dataframe存储到csv文件或txt文件中。存储的路径可以是绝对路径，也可以是相对路径。</p>  <pre class="language-python" data-language="python"><code class="language-python"># 将数据表df存入当前py文件所在位置下的test.csv文件中，如果没有这个文件，会自动创建df.to_csv(&#39;test.csv&#39;)# 将数据表df存入当前py文件所在位置下的test.txt文件中，如果没有这个文件，会自动创建df.to_csv(&#39;test.txt&#39;)</code></pre><h4 id="2-写入excel文件：df-to-excel"><a href="#2-写入excel文件：df-to-excel" class="headerlink" title="2.写入excel文件：df.to_excel()"></a>2.写入excel文件：df.to_excel()</h4><p>  写入Excel文件时，默认会写入Excel文件中的第一页。</p>  <pre class="language-python" data-language="python"><code class="language-python"># 将数据表df写入test.xlsx文件中df.to_excel(&#39;test.xlsx&#39;)</code></pre><p>  如果想要写入指定的页，则用参数sheet_name。</p>  <pre class="language-python" data-language="python"><code class="language-python"># 将数据表df写入test.xlsx文件中&#39;Sheet1&#39;页df.to_excel(&#39;test.xlsx&#39;,sheet_name&#x3D;&#39;Sheet1&#39;)</code></pre><h4 id="3-行列索引"><a href="#3-行列索引" class="headerlink" title="3.行列索引"></a>3.行列索引</h4><ul><li><p>存储行索引</p><p>存储时，默认将数据表中的行索引也存储到文件中。</p><pre class="language-python" data-language="python"><code class="language-python"># test.csv的行索引将会被存储起来df.to_csv(&#39;test.csv&#39;)</code></pre></li><li><p>不存储行索引</p><p>导出数据时，默认是要存储行索引的。不存储行索引的话，设置index的值为False。</p><pre class="language-python" data-language="python"><code class="language-python">df.to_csv(&#39;test.csv&#39;, index &#x3D; False)</code></pre></li><li><p>不存储列索引</p><p>导出数据时，默认是要存储列索引的。不存储列索引的话，设置header的值为False。不要列索引，导出的数据就没有列名。</p><pre class="language-python" data-language="python"><code class="language-python">df.to_csv(&#39;test.csv&#39;, header &#x3D; False)</code></pre></li></ul><h3 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h3><ul><li>在处理很大的文件时，或找出大文件中的参数集以便于后续处理时，你可能只想读取文件的一小部分或逐块对文件进行迭代，如果只想读取几行文件，可以通过nrows参数进行指定即可：</li></ul><pre class="language-python" data-language="python"><code class="language-python">import os  os.getcwd()    #可以查看当前工作目录                                       chunker &#x3D; pd.read_csv(&#39;ch06&#x2F;ex6.csv&#39;, chunksize&#x3D;100，nrows&#x3D;5) #表示只读取5行chunker &#x3D; pd.read_csv(&#39;ch06&#x2F;ex6.csv&#39;, chunksize&#x3D;100) #chunksize表示行数，每100行为一个模块chunker &lt;pandas.io.parsers.TextParser at 0x8398150&gt;   #该数据类型可以让我们对文件进行逐块迭代</code></pre><h3 id="把表头更改成中文"><a href="#把表头更改成中文" class="headerlink" title="把表头更改成中文"></a>把表头更改成中文</h3><pre class="language-py" data-language="py"><code class="language-py">df.columns &#x3D; [&#39;乘客ID&#39;,&#39;是否幸存&#39;,&#39;乘客等级&#39;,&#39;乘客姓名&#39;,&#39;性别&#39;,&#39;年龄&#39;,&#39;堂兄弟&#x2F;妹个数&#39;,&#39;父母与小孩个数&#39;,&#39; 船票信息&#39;,&#39;票价&#39;,&#39;客舱&#39;,&#39;登船港口&#39;]  #直接更改columns</code></pre><h3 id="查看DataFrame数据的基本信息"><a href="#查看DataFrame数据的基本信息" class="headerlink" title="查看DataFrame数据的基本信息"></a>查看DataFrame数据的基本信息</h3><pre class="language-python" data-language="python"><code class="language-python">df.shape——行数 列数df.dtypes——列数据类型df.ndim——数据维度df.index——行索引df.columns——列索引df.values——对象值，二维ndarray数组df.head(10)——显示前10行，默认是5行df.tail()——显示末尾几行，默认是5df.info()——相关系数，如行数，列数，列索引、列非空值个数，列类型，内存占用df.describe()——快速统计结果，计数、均值、标准差、最大值、四分数、最小值df.isnull()——判断数据是否为空，为空的地方返回True，其余地方返回False</code></pre><h3 id="Series-and-DataFrame"><a href="#Series-and-DataFrame" class="headerlink" title="Series and DataFrame"></a>Series and DataFrame</h3><ul><li>Pandas Series 类似表格中的一个列（column），类似于一维数组，可以保存任何数据类型。</li></ul><p>Series 由索引（index）和列组成，函数如下：</p><pre class="language-python" data-language="python"><code class="language-python">pandas.Series( data, index, dtype, name, copy)#例1.通过列表来创建import pandas as pda &#x3D; [&quot;Google&quot;, &quot;Runoob&quot;, &quot;Wiki&quot;]myvar &#x3D; pd.Series(a, index &#x3D; [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])print(myvar[&quot;y&quot;])      #通过索引读取数据#例2.通过类似字典来创建 此时字典的key变成了索引值import pandas as pdsites &#x3D; &#123;1: &quot;Google&quot;, 2: &quot;Runoob&quot;, 3: &quot;Wiki&quot;&#125;myvar &#x3D; pd.Series(sites, index &#x3D; [1, 2])  #可以指定索引来取其中的一部分print(myvar)</code></pre><ul><li>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</li></ul><pre class="language-python" data-language="python"><code class="language-python">pandas.DataFrame(data, index, columns, dtype, copy)#ndarrays创建--最简单易记的data1 &#x3D; &#123;&quot;报考的学校&quot;:[&#39;东华大学&#39;,&#39;北京大学&#39;,&#39;清华大学&#39;],&quot;想报的学校&quot;:[&quot;北京邮电大学&quot;,&quot;卡内基梅隆&quot;,&#39;Mit&#39;]&#125; school &#x3D; pd.DataFrame(data1,index&#x3D;[&#39;第一梯度&#39;,&#39;第二梯队&#39;,&#39;第三梯队&#39;])  #不能改columns</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研后Python复习回顾--语法篇</title>
      <link href="/2022/01/08/1.8/"/>
      <url>/2022/01/08/1.8/</url>
      
        <content type="html"><![CDATA[<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1 位置参数"></a>1 位置参数</h4><pre class="language-python" data-language="python"><code class="language-python">def power(x, n):     #此时x,n都是位置参数，调用函数时必须输入两个参数    s &#x3D; 1    while n &gt; 0:        n &#x3D; n - 1        s &#x3D; s * x    return s</code></pre><h4 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="2 默认参数"></a>2 默认参数</h4><pre class="language-python" data-language="python"><code class="language-python">def power(x, n&#x3D;2):  #n&#x3D;2相当于默认参数 此时我们可以只输入一个参数    s &#x3D; 1    while n &gt; 0:        n &#x3D; n - 1        s &#x3D; s * x    return s</code></pre><ul><li><p><strong>注:当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面，变化小的参数就可以作为默认参数。</strong></p></li><li><p><strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python">#此时默认参数是列表 是可变参数,Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。def add_end(L&#x3D;[]):    L.append(&#39;END&#39;)    return Ladd_end()&gt;&gt;&gt;[&#39;END&#39;]   add_end()&gt;&gt;&gt;[&#39;END&#39;, &#39;END&#39;]#因此我们需要将默认参数改为不变对象 None为不变对象，现在，无论调用多少次，都不会有问题def add_end(L&#x3D;None):    if L is None:        L &#x3D; []    L.append(&#39;END&#39;)    return L</code></pre><h4 id="3-可变参数"><a href="#3-可变参数" class="headerlink" title="3 可变参数"></a>3 可变参数</h4><ul><li>可变参数就是传入的参数个数是可变的，可应用于参数个数不确定</li></ul><pre class="language-python" data-language="python"><code class="language-python"># *+参数名就是可变参数，参数numbers接收到的是一个tuple，调用该函数时，可以传入任意个参数，包括0个参数，此时这些参数会自动转换成一个元组def calc(*numbers):       sum &#x3D; 0    for n in numbers:        sum &#x3D; sum + n * n    return sumcalc(1, 2)&gt;&gt;&gt;5calc()&gt;&gt;&gt; 0</code></pre><p>如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：</p><pre class="language-python" data-language="python"><code class="language-python">nums &#x3D; [1, 2, 3]calc(nums[0], nums[1], nums[2])14</code></pre><p>这种写法当然是可行的，但有更简单的写法，Python允许在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成<strong>可变参数</strong>传进去：</p><pre class="language-python" data-language="python"><code class="language-python">#*nums&#96;表示把&#96;nums&#96;这个list的所有元素作为可变参数传进去。nums &#x3D; [1, 2, 3]calc(*nums)14</code></pre><h4 id="4-关键字参数"><a href="#4-关键字参数" class="headerlink" title="4 关键字参数"></a>4 关键字参数</h4><ul><li>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<strong>dict</strong></li><li>类似可变参数 只是由可变参数的tuple变成了dict</li></ul><pre class="language-python" data-language="python"><code class="language-python">def person(name, age, **kw):    print(&#39;name:&#39;, name, &#39;age:&#39;, age, &#39;other:&#39;, kw)person(&#39;Michael&#39;, 30)name: Michael age: 30 other: &#123;&#125;</code></pre><h4 id="5-小结"><a href="#5-小结" class="headerlink" title="5 小结"></a>5 小结</h4><ul><li><p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p></li><li><p>要注意定义可变参数和关键字参数的语法：</p></li><li><p><code>*args</code>是可变参数，args接收的是一个tuple；</p></li><li><p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p></li><li><p>调用函数时如何传入可变参数和关键字参数的语法：</p></li><li><p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</p></li><li><p>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;)</code>。</p></li><li><p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p></li></ul><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><ul><li>典型例子 计算1到n的阶乘</li></ul><pre class="language-python" data-language="python"><code class="language-python">#递归计算1到n的阶乘def fac(n):    if n &#x3D;&#x3D; 1:        return n    return n * fac(n-1)    </code></pre><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li><p>L[0:3]表示0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</p></li><li><p>L[-2:]表示从倒数第二个元素开始到最后</p></li><li>L[::5] 所有数，每5个取一个</li><li>tuple也可以用切片操作，只是操作的结果仍是tuple</li><li>字符串也可以用切片操作，只是操作结果仍是字符串</li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><pre class="language-python" data-language="python"><code class="language-python">#利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：#法1  while循环def trim(s):    while s[:1] &#x3D;&#x3D; &quot; &quot;:        s &#x3D; s[1:]    while s[-1:] &#x3D;&#x3D; &quot; &quot;:        s &#x3D; s[0:-1]    return s #法二 递归def trim(s):    if s[0:1] &#x3D;&#x3D; &quot; &quot;:        return trim(s[1:])    elif s[-1:] &#x3D;&#x3D; &quot; &quot;:        return trim(s[0:-1])    else:        return s        </code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研后C语言复习回顾</title>
      <link href="/2022/01/06/%E7%A0%94%E5%90%8EC%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E5%9B%9E%E9%A1%BE/"/>
      <url>/2022/01/06/%E7%A0%94%E5%90%8EC%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="1-关系运算"><a href="#1-关系运算" class="headerlink" title="1.关系运算"></a>1.关系运算</h4><ul><li>判断是否相等和不等的优先级比其他关系运算符优先级要低</li><li>关系运算符优先级比算术运算符低 比赋值运算符高</li><li>小tips：  &gt;= 表示的是大于或等于</li></ul><h4 id="2-判断语句"><a href="#2-判断语句" class="headerlink" title="2.判断语句"></a>2.判断语句</h4><ul><li>if </li><li>if else</li><li>嵌套if语句(可if里嵌套if或if else或if else if else)</li><li>switch语句   （看作是一种基于计算的跳转，计算控制表达式的值后，程序会跳转到相匹配的case,如果执行完分支后，没有遇到break会继续执行下一个分支，这一点尤为要注意）</li><li>switch的控制表达式必须要是整型</li><li>case(常量) 常量也可以是常量表达式 例如1+1</li></ul><h4 id="3-简单代码练习"><a href="#3-简单代码练习" class="headerlink" title="3.简单代码练习"></a>3.简单代码练习</h4><ul><li>小启示 尽量写单一出口的代码</li></ul><pre class="language-c" data-language="c"><code class="language-c">1.&#x2F;&#x2F; 英尺换算&#x2F;&#x2F; 思路：#include &lt;stdio.h&gt;int main()&#123;    int cm, foot, inch;    scanf(&quot;%d&quot;, &amp;cm);    foot &#x3D; cm &#x2F; 30.48; &#x2F;&#x2F;强制类型转换,会将结果由浮点数转换整数    inch &#x3D; (cm &#x2F; 30.48 - foot) * 12;    printf(&quot;%d %d&quot;, foot, inch);    return 0;&#125;2.&#x2F;&#x2F;然后是几点&#x2F;&#x2F;思路：输入一个时间 首先利用除法和取余得到时和分钟 其次加上流逝的分钟数 最后再用取余和除法转换成终止时间include &lt;stdio.h&gt;int main()&#123;    int begin_time, end_time, time;    scanf(&quot;%d %d&quot;, &amp;begin_time, &amp;time);    end_time &#x3D; begin_time &#x2F; 100 * 60 + begin_time % 100 + time;    printf(&quot;%d%d&quot;, end_time &#x2F; 60, end_time % 60);    return 0;&#125;3.&#x2F;&#x2F; 逆序的三位数且输入数字含有结尾0时输出不应带有前导的0，比如输入700，输出应为7&#x2F;&#x2F; 思路：利用取余、除法运算分离百十个位，同时利用判断语句实现除0要求#include &lt;stdio.h&gt;int main()&#123;    int number, i, j, k;    scanf(&quot;%d&quot;, &amp;number);    i &#x3D; number &#x2F; 100;      &#x2F;&#x2F;百位    j &#x3D; number % 100 &#x2F; 10; &#x2F;&#x2F;十位    k &#x3D; number % 100 % 10; &#x2F;&#x2F;个位    if (k &#x3D;&#x3D; 0 &amp; j &#x3D;&#x3D; 0)    &#123;        printf(&quot;%d&quot;, i);    &#125;    else if (k &#x3D;&#x3D; 0 &amp; j !&#x3D; 0)    &#123;        printf(&quot;%d%d&quot;, j, i);    &#125;    else    &#123;        printf(&quot;%d%d%d&quot;, k, j, i);    &#125;    return 0;&#125;4.&#x2F;&#x2F; 成绩转换#include &lt;stdio.h&gt;int main()&#123;    int score;    scanf(&quot;%d&quot;, &amp;score);    score &#x2F;&#x3D; 10;    switch (score)    &#123;    case 10:      &#x2F;&#x2F; switch执行完一条分支的语句后如不遇到break会继续顺序执行下一个分支    case 9:        printf(&quot;A\n&quot;);        break;    case 8:        printf(&quot;B\n&quot;);        break;    case 7:        printf(&quot;C\n&quot;);        break;    case 6:        printf(&quot;D\n&quot;);        break;    default:        printf(&quot;E\n&quot;);        break;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode远程推送文件至github</title>
      <link href="/2022/01/03/vscode%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E8%87%B3github/"/>
      <url>/2022/01/03/vscode%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E8%87%B3github/</url>
      
        <content type="html"><![CDATA[<p>1.在github上新建一个仓库</p><p>2.在本地用编辑器打开本地的文件夹</p><p>3.此时如需把文件夹中的文件推送至远程仓库，</p><pre class="language-python" data-language="python"><code class="language-python">git init                      #初始化一个本地仓库git add readme.txt            #将这一个文件上传至仓库#git add .                    #将所有文件上传至仓库git commit -m “first commit”  #first commit是备注 即第一次提交git branch -M maingit remote add origin https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.git  #加仓库名git push -u origin main</code></pre><p>4.此时如果修改了文件 vscode左侧源代码管理会出现蓝色圆圈及其数字 表示文件已经更改，我们就需要将这个改变的文件先暂存本地仓库(源代码管理处文件的加号)再提交到本地仓库(<strong>此时会弹出输入框，输入备注回车</strong>) ，最后点击最左下角状态栏的循环箭头即可提交github更新更改</p><p><strong>注:如果非第一次创建只需执行第四步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程中遇到的问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2022/01/02/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/01/02/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="Markdown语法（typora）"><a href="#Markdown语法（typora）" class="headerlink" title="Markdown语法（typora）"></a>Markdown语法（typora）</h3><h4 id="1-代码块："><a href="#1-代码块：" class="headerlink" title="1.代码块："></a>1.代码块：</h4><ul><li>例</li></ul><pre class="language-python" data-language="python"><code class="language-python">print(&quot;人生苦短，我用python&quot;)  tips:在代码块中并不能进行高亮、加粗等操作</code></pre><h4 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h4><ul><li>加内容即生成标题 几个#号则几号标题</li><li>记得#后需加空格</li></ul><h4 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h4><h5 id="3-1-加粗"><a href="#3-1-加粗" class="headerlink" title="3.1 加粗"></a>3.1 加粗</h5><h5 id="3-2-高亮"><a href="#3-2-高亮" class="headerlink" title="3.2 高亮"></a>3.2 高亮</h5><h5 id="3-3-删除线"><a href="#3-3-删除线" class="headerlink" title="3.3 删除线"></a>3.3 删除线</h5><h5 id="3-4-斜体"><a href="#3-4-斜体" class="headerlink" title="3.4 斜体"></a>3.4 斜体</h5><h4 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h4><ul><li>用快捷键即可</li></ul><h4 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h4><hr><h4 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h4><p><img src="https://images.unsplash.com/photo-1457305237443-44c3d5a30b89?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2074&amp;q=80" alt="图片"></p><h4 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h4><p><a href="www.baidu.com"></a></p><h4 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h4><ul><li>无序列表</li></ul><p>1.有序列表</p>]]></content>
      
      
      <categories>
          
          <category> 实用paper工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
